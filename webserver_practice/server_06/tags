!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/jack/Desktop/code_read/webserver_practice/server_06/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20230827.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
$(OBJ_CLIENT)	makefile	/^$(OBJ_CLIENT): client.cpp $(SRC)$/;"	t
$(OBJ_SERVER)	makefile	/^$(OBJ_SERVER): server.cpp $(SRC) $(SERVER_FILE)$/;"	t
CHANNEL_H	src/Channel.h	/^#define CHANNEL_H$/;"	d
Channel	src/Channel.cpp	/^Channel::Channel(EventLoop* _loop, int _fd): loop(_loop), fd(_fd),events(0),revents(0), inEpoll(/;"	f	class:Channel
Channel	src/Channel.h	/^class Channel$/;"	c
EPOLL_H	src/Epoll.h	/^#define EPOLL_H$/;"	d
Epoll	src/Epoll.cpp	/^Epoll::Epoll(): epfd(-1), events(nullptr)$/;"	f	class:Epoll
Epoll	src/Epoll.h	/^class Epoll $/;"	c
EventLoop	src/EventLoop.cpp	/^EventLoop::EventLoop():ep(nullptr), quit(false)$/;"	f	class:EventLoop
EventLoop	src/EventLoop.h	/^class EventLoop$/;"	c
INETADDRESS_H	src/InetAddress.h	/^#define INETADDRESS_H$/;"	d
InetAddress	src/InetAddress.cpp	/^InetAddress::InetAddress(): addr_len(sizeof(addr))$/;"	f	class:InetAddress
InetAddress	src/InetAddress.cpp	/^InetAddress::InetAddress(const char* ip, uint16_t port)$/;"	f	class:InetAddress
InetAddress	src/InetAddress.h	/^class InetAddress $/;"	c
MAX_EVENTS	src/Epoll.cpp	/^#define MAX_EVENTS /;"	d	file:
MAX_EVENTS	src/server.cpp	/^#define MAX_EVENTS /;"	d	file:
OBJ_CLIENT	makefile	/^OBJ_CLIENT = client$/;"	m
OBJ_SERVER	makefile	/^OBJ_SERVER = server$/;"	m
READ_BUFFER	src/server.cpp	/^#define READ_BUFFER /;"	d	file:
SERVER_FILE	makefile	/^SERVER_FILE = src\/EventLoop.cpp src\/Epoll.cpp src\/InetAddress.cpp src\/Socket.cpp src\/Channe/;"	m
SERVER_H	server.h	/^#define SERVER_H$/;"	d
SERVER_H	src/server.h	/^#define SERVER_H$/;"	d
SOCKET_H	src/Socket.h	/^#define SOCKET_H$/;"	d
SOCKMAX	src/server.cpp	/^#define SOCKMAX /;"	d	file:
SRC	makefile	/^SRC = src\/util.cpp$/;"	m
Server	server.h	/^class Server$/;"	c
Server	src/server.cpp	/^Server::Server(EventLoop* _loop):loop(_loop)$/;"	f	class:Server
Server	src/server.h	/^class Server$/;"	c
Socket	src/Socket.cpp	/^Socket::Socket(): fd(-1)$/;"	f	class:Socket
Socket	src/Socket.cpp	/^Socket::Socket(int _fd): fd(_fd)$/;"	f	class:Socket
Socket	src/Socket.h	/^class Socket $/;"	c
UTIL_H	src/util.h	/^#define UTIL_H$/;"	d
__EVENTLOOP_H	src/EventLoop.h	/^#define __EVENTLOOP_H$/;"	d
accept	src/Socket.cpp	/^int Socket::accept(InetAddress* addr)$/;"	f	class:Socket	typeref:typename:int
addFd	src/Epoll.cpp	/^void Epoll::addFd(int fd, uint32_t op)$/;"	f	class:Epoll	typeref:typename:void
addr	src/InetAddress.h	/^    struct sockaddr_in addr;$/;"	m	class:InetAddress	typeref:struct:sockaddr_in
addr_len	src/InetAddress.h	/^    socklen_t addr_len;$/;"	m	class:InetAddress	typeref:typename:socklen_t
all	makefile	/^all: $(OBJ_CLIENT) $(OBJ_SERVER)$/;"	t
bind	src/Socket.cpp	/^void Socket::bind(InetAddress* addr)$/;"	f	class:Socket	typeref:typename:void
callback	src/Channel.h	/^        std::function<void()>callback;$/;"	m	class:Channel	typeref:typename:std::function<void ()>
clean	makefile	/^clean:$/;"	t
enableReading	src/Channel.cpp	/^void Channel::enableReading()$/;"	f	class:Channel	typeref:typename:void
ep	src/EventLoop.h	/^	Epoll *ep;$/;"	m	class:EventLoop	typeref:typename:Epoll *
epfd	src/Epoll.h	/^    int epfd;$/;"	m	class:Epoll	typeref:typename:int
errif	src/util.cpp	/^void errif(bool condition, const char* msg)$/;"	f	typeref:typename:void
events	src/Channel.h	/^	uint32_t events;$/;"	m	class:Channel	typeref:typename:uint32_t
events	src/Epoll.h	/^    struct epoll_event *events;$/;"	m	class:Epoll	typeref:struct:epoll_event *
fd	src/Channel.h	/^	int fd;$/;"	m	class:Channel	typeref:typename:int
fd	src/Socket.h	/^         int fd;$/;"	m	class:Socket	typeref:typename:int
getEvents	src/Channel.cpp	/^uint32_t Channel::getEvents()$/;"	f	class:Channel	typeref:typename:uint32_t
getFd	src/Channel.cpp	/^int Channel::getFd()$/;"	f	class:Channel	typeref:typename:int
getFd	src/Socket.cpp	/^int Socket::getFd()$/;"	f	class:Socket	typeref:typename:int
getInEpoll	src/Channel.cpp	/^bool Channel::getInEpoll()$/;"	f	class:Channel	typeref:typename:bool
getRevents	src/Channel.cpp	/^uint32_t Channel::getRevents()$/;"	f	class:Channel	typeref:typename:uint32_t
handleEvent	src/Channel.cpp	/^void Channel::handleEvent()$/;"	f	class:Channel	typeref:typename:void
handleReadEvent	src/server.cpp	/^void Server::handleReadEvent(int sockfd)$/;"	f	class:Server	typeref:typename:void
inEpoll	src/Channel.h	/^	bool inEpoll;$/;"	m	class:Channel	typeref:typename:bool
listen	src/Socket.cpp	/^void Socket::listen()$/;"	f	class:Socket	typeref:typename:void
loop	server.h	/^	EventLoop *loop;$/;"	m	class:Server	typeref:typename:EventLoop *
loop	src/Channel.h	/^	EventLoop *loop;$/;"	m	class:Channel	typeref:typename:EventLoop *
loop	src/EventLoop.cpp	/^void EventLoop::loop()$/;"	f	class:EventLoop	typeref:typename:void
loop	src/server.h	/^	EventLoop* loop;$/;"	m	class:Server	typeref:typename:EventLoop *
main	client.cpp	/^int main()$/;"	f	typeref:typename:int
main	server.cpp	/^int main()$/;"	f	typeref:typename:int
newConnection	src/server.cpp	/^void Server::newConnection(Socket* serv_sock)$/;"	f	class:Server	typeref:typename:void
poll	src/Epoll.cpp	/^std::vector<Channel*> Epoll::poll(int timeout)$/;"	f	class:Epoll	typeref:typename:std::vector<Channel * >
quit	src/EventLoop.h	/^	bool quit;$/;"	m	class:EventLoop	typeref:typename:bool
revents	src/Channel.h	/^	uint32_t revents;$/;"	m	class:Channel	typeref:typename:uint32_t
setCallback	src/Channel.cpp	/^void Channel::setCallback(std::function<void()>_cb)$/;"	f	class:Channel	typeref:typename:void
setInEpoll	src/Channel.cpp	/^void Channel::setInEpoll()$/;"	f	class:Channel	typeref:typename:void
setRevents	src/Channel.cpp	/^void Channel::setRevents(uint32_t _ev)$/;"	f	class:Channel	typeref:typename:void
setnonblocking	src/Socket.cpp	/^void Socket::setnonblocking()$/;"	f	class:Socket	typeref:typename:void
updateChannel	src/Epoll.cpp	/^void Epoll::updateChannel(Channel* channel)$/;"	f	class:Epoll	typeref:typename:void
updateChannel	src/EventLoop.cpp	/^void EventLoop::updateChannel(Channel *ch)$/;"	f	class:EventLoop	typeref:typename:void
~Channel	src/Channel.cpp	/^Channel::~Channel()$/;"	f	class:Channel
~Epoll	src/Epoll.cpp	/^Epoll::~Epoll()$/;"	f	class:Epoll
~EventLoop	src/EventLoop.cpp	/^EventLoop:: ~EventLoop()$/;"	f	class:EventLoop
~InetAddress	src/InetAddress.cpp	/^InetAddress::~InetAddress()$/;"	f	class:InetAddress
~Server	src/server.cpp	/^Server::~Server()$/;"	f	class:Server
~Socket	src/Socket.cpp	/^Socket::~Socket()$/;"	f	class:Socket
